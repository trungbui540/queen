if not game:IsLoaded() then
    game.Loaded:Wait()
end

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local plr = Players.LocalPlayer
local character = plr.Character or plr.CharacterAdded:Wait()

local giftRemote = ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("GiftItem")
local acceptRemote = ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("AcceptGift")
local removeRemote = ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("RemoveItem")
local ItemSell = ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("ItemSell")

local Backpack = plr:WaitForChild("Backpack", 10)
local giftedCount = {}
local giftQueue = {}

plr.CharacterAdded:Connect(function(newChar)
    character = newChar
    task.wait(1)
    Backpack = plr:WaitForChild("Backpack", 10)
end)

-- Hook auto accept
local function hookAllRemotes()
    for _, obj in pairs(ReplicatedStorage:GetDescendants()) do
        if obj:IsA("RemoteEvent") and obj.OnClientEvent then
            obj.OnClientEvent:Connect(function(...)
                local args = {...}
                for _, arg in pairs(args) do
                    if typeof(arg) == "table" and arg.ID and typeof(arg.ID) == "number" and arg.ID > 1000000000 then
                        table.insert(giftQueue, arg.ID)
                    end
                end
            end)
        end
    end
end

-- Auto accept loop
spawn(function()
    hookAllRemotes()
    while task.wait(1) do
        if _G.CF.acceptGifts and #giftQueue > 0 then
            local giftID = table.remove(giftQueue, 1)
            local success, err = pcall(function()
                acceptRemote:FireServer({ID = giftID})
            end)
            if success then
                print("‚úÖ Accepted gift:", giftID)
            else
                warn("‚ùå Failed to accept gift:", err)
            end
        end
    end
end)

local function ToGift()
    local receivers = type(_G.CF.Receivers) == "table" and _G.CF.Receivers or {_G.CF.Receivers}
    local Humanoid = character:FindFirstChildOfClass("Humanoid")
    local totalSent = 0
    local COOLDOWN = _G.CF.giftCooldown or 3
    
    -- ‚úÖ L·∫§Y T√äN NG∆Ø·ªúI CH∆†I HI·ªÜN T·∫†I
    local myName = plr.Name
    
    print("üë§ Ng∆∞·ªùi g·ª≠i:", myName)
    print("üë• Danh s√°ch receivers:", table.concat(receivers, ", "))

    for _, receiverName in pairs(receivers) do
        -- ‚úÖ B·ªé QUA N·∫æU NG∆Ø·ªúI NH·∫¨N L√Ä CH√çNH M√åNH
        if receiverName == myName then
            print("‚è≠Ô∏è B·ªè qua:", receiverName, "(l√† ch√≠nh m√¨nh)")
            continue
        end
        
        local receiver = Players:FindFirstChild(receiverName)
        
        if not receiver then
            warn("‚ö†Ô∏è Ng∆∞·ªùi nh·∫≠n KH√îNG ONLINE:", receiverName)
            continue
        end
        
        print("‚úÖ T√¨m th·∫•y ng∆∞·ªùi nh·∫≠n:", receiverName)

        for _, petName in pairs(_G.CF.ListPetGift) do
            local foundPet = false

            for _, item in pairs(Backpack:GetChildren()) do
                if item:IsA("Tool") and string.find(item.Name:lower(), petName:lower()) then
                    foundPet = true
                    task.wait(0.3)

                    local equipSuccess = pcall(function()
                        Humanoid:EquipTool(item)
                    end)

                    if not equipSuccess then
                        warn("‚ùå Kh√¥ng th·ªÉ equip:", item.Name)
                        break
                    end

                    task.wait(0.5)

                    local petTool = character:FindFirstChildOfClass("Tool")
                    
                    if petTool and string.find(petTool.Name:lower(), petName:lower()) then
                        local args = {{Item = petTool, ToGift = receiverName}}
                        local success, err = pcall(function()
                            giftRemote:FireServer(unpack(args))
                        end)

                        if success then
                            print(("üì§ ƒê√É G·ª¨I: '%s' cho '%s'"):format(petTool.Name, receiverName))
                            totalSent = totalSent + 1

                            if not giftedCount[receiverName] then
                                giftedCount[receiverName] = {}
                            end
                            giftedCount[receiverName][petTool.Name] = (giftedCount[receiverName][petTool.Name] or 0) + 1

                            task.wait(COOLDOWN)
                        else
                            warn(("‚ùå L·ªói khi g·ª≠i cho '%s': %s"):format(receiverName, tostring(err)))
                        end
                    else
                        warn("‚ùå Kh√¥ng t√¨m th·∫•y pet tool sau khi equip")
                    end
                    break
                end
            end

            if not foundPet then
                warn(("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y pet '%s'"):format(petName))
            end
        end
        
        print(("‚úÖ Ho√†n th√†nh g·ª≠i cho '%s'"):format(receiverName))
        task.wait(1)
    end
    
    print(("üìä T·ªîNG: ƒê√£ g·ª≠i %d pets"):format(totalSent))
end

local function SellMaxInventory()
    -- FIX: L·∫•y Backpack ƒë√∫ng c√°ch
    local Backpack = plr:WaitForChild("Backpack", 5) 
    
    -- L·∫•y HUD v√† MaxInv
    local playerGui = plr:WaitForChild("PlayerGui", 5)
    
    local hud = playerGui:WaitForChild("HUD", 5)
    
    local maxInvObj = hud:WaitForChild("MaxInv", 5)
    
    -- L·∫•y gi√° tr·ªã max inventory
    local maxInventory = 250
    if maxInvObj:IsA("IntValue") or maxInvObj:IsA("NumberValue") then
        maxInventory = maxInvObj.Value
    elseif maxInvObj:IsA("TextLabel") or maxInvObj:IsA("TextBox") then
        maxInventory = tonumber(maxInvObj.Text) or 250
    end
    
    -- ƒê·∫øm items trong backpack
    local itemCount = #Backpack:GetChildren()
    
    -- Ki·ªÉm tra inventory ƒë√£ ƒë·∫ßy ch∆∞a
    if itemCount < maxInventory then
        print(("üì¶ Inventory: %d/%d - Ch∆∞a ƒë·∫ßy"):format(itemCount, maxInventory))
        return false
    end
    
    print(("üî¥ Inventory ƒê·∫¶Y: %d/%d - B·∫ÆT ƒê·∫¶U B√ÅN!"):format(itemCount, maxInventory))
    
    -- G·ª≠i request b√°n
    local success, err = pcall(function()
        ItemSell:FireServer()
    end)
    
    if not success then
        warn("‚ùå L·ªói khi g·ª≠i y√™u c·∫ßu b√°n: " .. tostring(err))
        return false
    end
    
    print("üí∞ ƒê√£ g·ª≠i y√™u c·∫ßu b√°n, ch·ªù popup hi·ªán...")
    
    task.wait(0.5)
    
    -- L·∫•y popup GUI
    local popupGui = hud:WaitForChild("PopUp", 10)
    local content = popupGui:WaitForChild("Content", 5)
    local buttons = content:WaitForChild("Buttons", 5)
    local yes = buttons:WaitForChild("Yes", 5)
    local yesBtn = yes:WaitForChild("TextButton", 5)
    
    -- ƒê·ª£i popup hi·ªán
    local timeout = 0
    local maxTimeout = 10
    
    if not popupGui.Visible then
        print("‚è≥ ƒêang ch·ªù popup hi·ªán...")
        repeat
            task.wait(0.1)
            timeout = timeout + 0.1
            if timeout > maxTimeout then
                warn("‚è±Ô∏è Timeout: Popup kh√¥ng hi·ªán sau " .. maxTimeout .. " gi√¢y")
                return false
            end
        until popupGui.Visible
    end
    
    task.wait(0.2)
    print("üü¢ Popup ƒë√£ m·ªü, b·∫•m YES...")

    pcall(function()
        for _, conn in pairs(getconnections(yesBtn.Activated)) do
            conn:Fire()
        end
    end)
    
    pcall(function()
        for _, conn in pairs(getconnections(yesBtn.MouseButton1Click)) do
            conn:Fire()
        end
    end)
    
    print("‚úÖ ƒê√£ b·∫•m YES - B√°n xong!")
    task.wait(0.5)
    
    return true
end

local function removeAllPetsFromPlots()
    local count = 0
    local workspace = game:GetService("Workspace")
    local plots = workspace:FindFirstChild("Plots")
    local listPlants = _G.CF.ListPetGift -- Danh s√°ch c√¢y c·∫ßn x√≥a
    
    if not plots then
        warn("‚ùå Kh√¥ng t√¨m th·∫•y Plots trong Workspace")
        return
    end
    
    -- H√†m ki·ªÉm tra xem plant c√≥ trong danh s√°ch kh√¥ng
    local function isInList(plantName)
        for _, name in pairs(listPlants) do
            if string.lower(plantName):find(string.lower(name)) then
                return true
            end
        end
        return false
    end
    
    -- H√†m l·∫•y UUID t·ª´ attributes
    local function getUUID(plant)
        local uuid = plant:GetAttribute("UUID")
        if uuid then
            return uuid
        end
        
        -- T√¨m UUID trong t·∫•t c·∫£ attributes
        for attrName, attrValue in pairs(plant:GetAttributes()) do
            if type(attrValue) == "string" and attrValue:match("%x%x%x%x%x%x%x%x%-%x%x%x%x%-%x%x%x%x%-%x%x%x%x%-%x%x%x%x%x%x%x%x%x%x%x%x") then
                return attrValue
            end
        end
        
        return nil
    end
    
    for _, plot in pairs(plots:GetChildren()) do
        local plants = plot:FindFirstChild("Plants")
        if plants then
            for _, plant in pairs(plants:GetChildren()) do
                -- Ki·ªÉm tra xem plant c√≥ trong danh s√°ch c·∫ßn x√≥a kh√¥ng
                if isInList(plant.Name) then
                    local uuid = getUUID(plant)
                    
                    if uuid then
                        local success, err = pcall(function()
                            removeRemote:FireServer(uuid)
                        end)
                        
                        if success then
                            count = count + 1
                            print("‚úÖ ƒê√£ x√≥a:", plant.Name, "- UUID:", uuid)
                            task.wait(0.3)
                        else
                            warn("‚ùå L·ªói khi x√≥a plant:", plant.Name, "UUID:", uuid, err)
                        end
                    else
                        warn("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y UUID cho:", plant.Name)
                    end
                end
            end
        end
    end
    
    print("üóëÔ∏è T·ªïng c·ªông ƒë√£ x√≥a", count, "plants kh·ªèi plots")
end

-- üéØ H√ÄM QU·∫¢N L√ù INVENTORY
local function CheckAndManageInventory()
    if not Backpack then
        warn("‚ùå Backpack kh√¥ng t·ªìn t·∫°i")
        return
    end
    
    local playerGui = plr:FindFirstChild("PlayerGui")
    if not playerGui then return end
    
    local hud = playerGui:FindFirstChild("HUD")
    if not hud then return end
    
    local maxInvObj = hud:FindFirstChild("MaxInv")
    if not maxInvObj then return end
    
    local maxInventory = 250
    if maxInvObj:IsA("IntValue") or maxInvObj:IsA("NumberValue") then
        maxInventory = maxInvObj.Value
    elseif maxInvObj:IsA("TextLabel") or maxInvObj:IsA("TextBox") then
        maxInventory = tonumber(maxInvObj.Text) or 250
    end
    
    local itemCount = #Backpack:GetChildren()
    
    if itemCount >= maxInventory then
        print("üî¥ Inventory ƒê·∫¶Y!")
        print("  ‚Üí B∆∞·ªõc 1: B√°n items...")
        local sellSuccess = pcall(SellMaxInventory)
        if sellSuccess then
            task.wait(3)
        end
        print("  ‚Üí B∆∞·ªõc 2: X√≥a pets kh·ªèi plots...")
        pcall(removeAllPetsFromPlots)
    else
        print("üü¢ Inventory ch∆∞a ƒë·∫ßy")
        print("  ‚Üí X√≥a pets kh·ªèi plots ƒë·ªÉ ti·∫øp t·ª•c...")
        pcall(removeAllPetsFromPlots)
    end
end

-- Main loop
spawn(function()
    task.wait(1)
    print("üîÑ Script started!")
    print("=" .. string.rep("=", 50))
    
    while true do
        -- 1. Qu·∫£n l√Ω inventory (b√°n n·∫øu ƒë·∫ßy + x√≥a pets)
        print("\nüîç Ki·ªÉm tra inventory...")
        pcall(CheckAndManageInventory)
        task.wait(2)
        
        -- 2. G·ª≠i qu√† (n·∫øu b·∫≠t)
        if _G.CF.autoSendGift then
            print("\nüéÅ B·∫Øt ƒë·∫ßu g·ª≠i qu√†...")
            pcall(ToGift)
        end
        
        print("\n‚è≥ ƒê·ª£i 5 gi√¢y tr∆∞·ªõc khi l·∫∑p l·∫°i...")
        print("=" .. string.rep("=", 50))
        task.wait(3)
    end
end)
