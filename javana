if not game:IsLoaded() then game.Loaded:Wait() end

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local LocalPlayer = Players.LocalPlayer
local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()

-- Remotes
local giftRemote = ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("GiftItem")
local acceptRemote = ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("AcceptGift")
local removeRemote = ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("RemoveItem")
local ItemSell = ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("ItemSell")
local FavoriteRemote = ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("FavoritePet") 

local Backpack = LocalPlayer:WaitForChild("Backpack", 10)
local giftQueue = {}

-- Update character reference
LocalPlayer.CharacterAdded:Connect(function(newChar)
    character = newChar
    task.wait(1)
    Backpack = LocalPlayer:WaitForChild("Backpack", 10)
end)


local function hookAllRemotes()
    for _, obj in pairs(ReplicatedStorage:GetDescendants()) do
        if obj:IsA("RemoteEvent") and obj.OnClientEvent then
            obj.OnClientEvent:Connect(function(...)
                local args = {...}
                for _, arg in pairs(args) do
                    if typeof(arg) == "table" and arg.ID and typeof(arg.ID) == "number" and arg.ID > 1000000000 then
                        table.insert(giftQueue, arg.ID)
                    end
                end
            end)
        end
    end
end

spawn(function()
    hookAllRemotes()
    while task.wait(1) do
        if _G.CF.acceptGifts and #giftQueue > 0 then
            local giftID = table.remove(giftQueue, 1)
            local success, err = pcall(function()
                acceptRemote:FireServer({ID = giftID})
            end)
            if success then
                print("Accepted gift:", giftID)
            else
                warn("Failed to accept:", err)
            end
        end
    end
end)


local function ToGift()
    local receivers = type(_G.CF.Receivers) == "table" and _G.CF.Receivers or {_G.CF.Receivers}
    local Humanoid = character:FindFirstChildOfClass("Humanoid")
    if not Humanoid then 
        warn("Not found Humanoid")
        return 
    end
    
    local myName = LocalPlayer.Name
    local totalSent = 0
    
    print("\n Start sent gift")
    print("Sender:", myName)

    for _, receiverName in pairs(receivers) do
        if receiverName == myName then
            print("Bỏ qua:", receiverName, "chính mình")
            goto skipReceiver
        end
        
        local receiver = Players:FindFirstChild(receiverName)
        if not receiver then
            warn("Receiver OFFLINE:", receiverName)
            goto skipReceiver
        end
        
        print("\n Find:", receiverName)

        for _, petName in pairs(_G.CF.ListPetGift) do
            local foundPet = false

            for _, item in pairs(Backpack:GetChildren()) do
                if item:IsA("Tool") and string.find(item.Name:lower(), petName:lower()) and 
                   not string.find(item.Name:lower(), "seed") then
                    foundPet = true
                    task.wait(0.3)

                    local success = pcall(function()
                        Humanoid:EquipTool(item)
                    end)

                    if not success then
                        warn("not equip:", item.Name)
                        break
                    end

                    task.wait(0.5)
                    local petTool = character:FindFirstChildOfClass("Tool")
                    
                    if petTool and string.find(petTool.Name:lower(), petName:lower()) and
                       not string.find(petTool.Name:lower(), "seed") then
                        local args = {{Item = petTool, ToGift = receiverName}}
                        local sendSuccess, err = pcall(function()
                            giftRemote:FireServer(unpack(args))
                        end)

                        if sendSuccess then
                            print(("Sent: '%s' → '%s'"):format(petTool.Name, receiverName))
                            totalSent = totalSent + 1
                            task.wait(_G.CF.giftCooldown)
                        else
                            warn(("erro Sent: %s"):format(tostring(err)))
                        end
                    end
                    break
                end
            end

            if not foundPet then
                warn(("Not Found: '%s'"):format(petName))
            end
        end
        ::skipReceiver::
    end
    
    print(("\n Total: Sent %d pets\n"):format(totalSent))
end

local function SellMaxInventory()
    local playerGui = LocalPlayer:FindFirstChild("PlayerGui")
    if not playerGui then return false end
    
    local hud = playerGui:FindFirstChild("HUD")
    if not hud then return false end
    
    local maxInvObj = hud:FindFirstChild("MaxInv")
    if not maxInvObj then return false end
    
    local maxInventory = 250
    if maxInvObj:IsA("IntValue") or maxInvObj:IsA("NumberValue") then
        maxInventory = maxInvObj.Value
    elseif maxInvObj:IsA("TextLabel") or maxInvObj:IsA("TextBox") then
        maxInventory = tonumber(maxInvObj.Text) or 250
    end
    
    local itemCount = #Backpack:GetChildren()
    
    if itemCount < maxInventory then
        print(("Inventory: %d/%d - Not Full"):format(itemCount, maxInventory))
        return false
    end
    
    print(("Full: %d/%d - Start Sell!"):format(itemCount, maxInventory))
    
    local success = pcall(function()
        ItemSell:FireServer()
    end)
    
    if not success then
        warn("erro request selling")
        return false
    end
    
    task.wait(0.5)
    
    local popupGui = hud:FindFirstChild("PopUp")
    if not popupGui then return false end
    
    local content = popupGui:FindFirstChild("Content")
    if not content then return false end
    
    local buttons = content:FindFirstChild("Buttons")
    if not buttons then return false end
    
    local yes = buttons:FindFirstChild("Yes")
    if not yes then return false end
    
    local yesBtn = yes:FindFirstChild("TextButton")
    if not yesBtn then return false end
    
    local timeout = 0
    while not popupGui.Visible and timeout < 10 do
        task.wait(0.1)
        timeout = timeout + 0.1
    end
    
    if not popupGui.Visible then
        warn("Popup not show")
        return false
    end
    
    task.wait(0.2)
    print("YES...")

    pcall(function()
        for _, conn in pairs(getconnections(yesBtn.Activated)) do
            conn:Fire()
        end
    end)
    
    pcall(function()
        for _, conn in pairs(getconnections(yesBtn.MouseButton1Click)) do
            conn:Fire()
        end
    end)
    
    task.wait(0.5)
    return true
end


local function getUUID(obj)
    local uuid = obj:GetAttribute("UUID")
    if uuid then return uuid end
    
    for _, v in pairs(obj:GetAttributes()) do
        if type(v) == "string" and v:match("%x%x%x%x%x%x%x%x%-%x%x%x%x%-%x%x%x%x%-%x%x%x%x%-%x%x%x%x%x%x%x%x%x%x%x%x") then
            return v
        end
    end
end

local function isInList(name, list)
    for _, item in pairs(list) do
        if name:lower():find(item:lower()) then
            return true
        end
    end
    return false
end

local function removeAllPetsFromPlots()
    local workspace = game:GetService("Workspace")
    local plots = workspace:FindFirstChild("Plots")
    
    if not plots then
        warn("Not Found Plots")
        return
    end
    
    local count = 0
    
    for _, plot in pairs(plots:GetChildren()) do
        local plants = plot:FindFirstChild("Plants")
        if plants then
            for _, plant in pairs(plants:GetChildren()) do
                if isInList(plant.Name, _G.CF.ListPetGift) then
                    local uuid = getUUID(plant)
                    
                    if uuid then
                        local success = pcall(function()
                            removeRemote:FireServer(uuid)
                        end)
                        
                        if success then
                            count = count + 1
                            print("delete:", plant.Name)
                            task.wait(0.3)
                        else
                            warn("erro delete:", plant.Name)
                        end
                    end
                end
            end
        end
    end
    
    print(("Delete %d pets From plots"):format(count))
end

local function isFavorited(slot)
    local heart = slot:FindFirstChild("HeartIcon")
    return heart and heart.Visible
end

local function getPetName(slot)
    local name = slot:GetAttribute("PetName")
    if name then return name end
    
    for _, child in ipairs(slot:GetDescendants()) do
        if child:IsA("TextLabel") and child.Text ~= "" and not tonumber(child.Text) then
            return child.Text
        end
    end
end

local function tryFavorite(slot, idx, location)
    local petName = getPetName(slot)
    if not petName or not isInList(petName, _G.CF.ListPetGift) then 
        return false 
    end
    
    if isFavorited(slot) then
        return true
    end

    local uuid = getUUID(slot)
    
    if not uuid then
        for _, item in ipairs(Backpack:GetChildren()) do
            if item.Name:lower():find(petName:lower()) then
                uuid = getUUID(item)
                if uuid then break end
            end
        end
    end

    if uuid then
        print(("[%s] Favorite: %s (Slot %d)"):format(location, petName, idx))
        FavoriteRemote:FireServer(uuid)
        task.wait(0.3)
        return true
    else
        warn(("[%s] Not Found UUID: %s"):format(location, petName))
    end
    return false
end

local function scanAndFavoritePets()
    local backpackGui = LocalPlayer:FindFirstChild("PlayerGui")
    if not backpackGui then 
        warn("Not Found PlayerGui")
        return 
    end
    
    backpackGui = backpackGui:FindFirstChild("BackpackGui")
    if not backpackGui then 
        warn("Not Found BackpackGui")
        return 
    end
    
    local containers = {
        {
            path = {"Backpack","Inventory","ScrollingFrame","UIGridFrame"}, 
            range = 250, 
            name = "Inventory"
        },
        {
            path = {"Backpack","Hotbar"}, 
            range = 10, 
            name = "Hotbar"
        },
    }

    for _, cfg in ipairs(containers) do
        local gui = backpackGui
        
        for _, name in ipairs(cfg.path) do
            if gui then 
                gui = gui:FindFirstChild(name) 
            else
                break
            end
        end
        
        if not gui then
            warn("Not Found:", cfg.name)
        else
            print(("Sweep %s..."):format(cfg.name))
            local count = 0
            
            for i = 1, cfg.range do
                local slot = gui:FindFirstChild(tostring(i))
                if slot and tryFavorite(slot, i, cfg.name) then
                    count = count + 1
                end
            end
            
            if count > 0 then
                print(("%s: %d pets favorite"):format(cfg.name, count))
            end
        end
    end
end


local function CheckAndManageInventory()
    if not Backpack then
        warn("Backpack does not exist")
        return
    end
    
    local playerGui = LocalPlayer:FindFirstChild("PlayerGui")
    if not playerGui then return end
    
    local hud = playerGui:FindFirstChild("HUD")
    if not hud then return end
    
    local maxInvObj = hud:FindFirstChild("MaxInv")
    if not maxInvObj then return end
    
    local maxInventory = 250
    if maxInvObj:IsA("IntValue") or maxInvObj:IsA("NumberValue") then
        maxInventory = maxInvObj.Value
    elseif maxInvObj:IsA("TextLabel") or maxInvObj:IsA("TextBox") then
        maxInventory = tonumber(maxInvObj.Text) or 250
    end
    
    local itemCount = #Backpack:GetChildren()
    
    if itemCount >= maxInventory then
        print("  → quest 1: Ban items...")
        pcall(SellMaxInventory)
        task.wait(3)
        print("  → quest 2: Xoa pets khoi plots...")
        pcall(removeAllPetsFromPlots)
    else
        print("Inventory OK, xoa pets khoi plots...")
        pcall(removeAllPetsFromPlots)
    end
end


spawn(function()
    task.wait(2)
    while true do
        print("\n Kiem tra inventory...")
        pcall(CheckAndManageInventory)
        task.wait(1)
        
        if _G.CF.autoFavorite then
            print("\n Quet và favorite pets...")
            pcall(scanAndFavoritePets)
            task.wait(2)
        end
        
        if _G.CF.autoSendGift then
            print("\n sent gift...")
            pcall(ToGift)
        end
        task.wait(3)
    end
end)

print(" Script loaded! Auto loops started.")
