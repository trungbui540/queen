if not game:IsLoaded() then game.Loaded:Wait() end

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local LocalPlayer = Players.LocalPlayer
local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()

-- Remotes
local giftRemote = ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("GiftItem")
local acceptRemote = ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("AcceptGift")
local removeRemote = ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("RemoveItem")
local ItemSell = ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("ItemSell")
local FavoriteRemote = ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("FavoriteItem")

local Backpack = LocalPlayer:WaitForChild("Backpack", 10)
local giftQueue, giftSet = {}, {}
local maxQueueSize, acceptThrottle = 50, 1

LocalPlayer.CharacterAdded:Connect(function(newChar)
    character = newChar
    task.wait(1)
    Backpack = LocalPlayer:WaitForChild("Backpack", 10)
end)

-- üì® Queue x·ª≠ l√Ω nh·∫≠n gift
local function pushGift(id)
    if not id or type(id) ~= "number" or giftSet[id] then return end
    if #giftQueue >= maxQueueSize then
        local old = table.remove(giftQueue, 1)
        if old then giftSet[old] = nil end
    end
    table.insert(giftQueue, id)
    giftSet[id] = true
end

-- üß© Hook remote nh·∫≠n qu√†
local function safeHookRemotes()
    local toCheck = {}
    if ReplicatedStorage:FindFirstChild("Remotes") then
        local r = ReplicatedStorage.Remotes
        if r:FindFirstChild("GiftItem") then table.insert(toCheck, r.GiftItem) end
        if r:FindFirstChild("AcceptGift") then table.insert(toCheck, r.AcceptGift) end
    end

    if #toCheck == 0 then
        local maybeGift = ReplicatedStorage:FindFirstChild("GiftItem")
        if maybeGift then table.insert(toCheck, maybeGift) end
    end

    for _, remote in ipairs(toCheck) do
        if remote:IsA("RemoteEvent") then
            remote.OnClientEvent:Connect(function(...)
                for _, a in ipairs({...}) do
                    if type(a) == "table" and a.ID then
                        pcall(pushGift, a.ID)
                    end
                end
            end)
        end
    end
end

-- üîÑ T·ª± ƒë·ªông accept gift
task.spawn(function()
    safeHookRemotes()

    while true do
        task.wait(0.25)
        if _G.CF and _G.CF.acceptGifts and acceptRemote then
            local id = table.remove(giftQueue, 1)
            if id then
                giftSet[id] = nil
                local ok, err = pcall(function()
                    acceptRemote:FireServer({ID = id})
                end)
                if ok then
                    print("‚úÖ Accepted gift", id)
                else
                    warn("‚ùå Accept failed:", tostring(err))
                end
                task.wait(acceptThrottle)
            end
        end
    end
end)

-- üéÅ G·ª≠i qu√†
local function ToGift()
    -- üß© L·∫•y th√¥ng tin c·∫•u h√¨nh
    local receivers = type(_G.CF.Receivers) == "table" and _G.CF.Receivers or {_G.CF.Receivers}
    local Humanoid = character:FindFirstChildOfClass("Humanoid")
    if not Humanoid then
        warn("Kh√¥ng t√¨m th·∫•y Humanoid!")
        return
    end

    local myName = LocalPlayer.Name
    local totalSent = 0
    local minDamage = _G.CF.MinDamage or 0
    local maxDamage = _G.CF.MaxDamage or math.huge
    local giftCooldown = _G.CF.giftCooldown or 2
    local listPetGift = _G.CF.ListPetGift or {}

    print("üë§ Ng∆∞·ªùi g·ª≠i:", myName)
    local senderIsReceiver = table.find(receivers, myName) ~= nil
    print("üìã Sender n·∫±m trong Receivers:", senderIsReceiver)

    -- üö´ Kh√¥ng g·ª≠i n·∫øu ng∆∞·ªùi g·ª≠i n·∫±m trong danh s√°ch nh·∫≠n
    if senderIsReceiver then
        print("üö´ Ng∆∞·ªùi g·ª≠i n·∫±m trong danh s√°ch Receivers, kh√¥ng th·ª±c hi·ªán gift.")
        return
    end

    print("‚úÖ Ng∆∞·ªùi g·ª≠i h·ª£p l·ªá (ngo√†i Receivers), b·∫Øt ƒë·∫ßu g·ª≠i...")

    -- üîÅ Duy·ªát t·ª´ng ng∆∞·ªùi nh·∫≠n
    for _, receiverName in ipairs(receivers) do
        if receiverName == myName then
            continue
        end

        local receiver = Players:FindFirstChild(receiverName)
        if not receiver then
            warn("‚ö†Ô∏è Ng∆∞·ªùi nh·∫≠n OFFLINE:", receiverName)
            continue
        end

        print(("\nüéÅ G·ª≠i cho: %s"):format(receiverName))
        local sentCount = 0

        -- üîç Duy·ªát pet trong Backpack
        for _, item in ipairs(Backpack:GetChildren()) do
            if not item:IsA("Tool") then continue end
            if string.find(item.Name:lower(), "seed") then continue end

            -- L·∫•y damage
            local damageValue = 0
            if item:GetAttribute("Damage") then
                damageValue = tonumber(item:GetAttribute("Damage")) or 0
            else
                local info = item:FindFirstChild("Info") or item:FindFirstChild("Stats") or item:FindFirstChild("Configuration")
                if info and info:FindFirstChild("Damage") then
                    damageValue = tonumber(info.Damage.Value) or 0
                end
            end

            -- üéØ Ki·ªÉm tra h·ª£p l·ªá (v·ª´a Damage v·ª´a List)
            local isInList = false
            for _, name in ipairs(listPetGift) do
                if string.find(item.Name:lower(), name:lower()) then
                    isInList = true
                    break
                end
            end

            local isInDamageRange = (damageValue >= minDamage and damageValue <= maxDamage)
            local isValid = (isInList or isInDamageRange)

            if not isValid then
                print(("‚öôÔ∏è '%s' (Damage %d) kh√¥ng h·ª£p l·ªá."):format(item.Name, damageValue))
                continue
            end

            -- üì® Ti·∫øn h√†nh g·ª≠i
            local ok, err = pcall(function()
                Humanoid:EquipTool(item)
                task.wait(0.25)

                local equipped = character:FindFirstChildOfClass("Tool")
                if equipped then
                    local args = {{Item = equipped, ToGift = receiverName}}
                    giftRemote:FireServer(unpack(args))
                    totalSent += 1
                    sentCount += 1
                    print(("‚úÖ ƒê√£ g·ª≠i '%s' (Damage: %d) ‚Üí %s"):format(item.Name, damageValue, receiverName))
                end
            end)

            if not ok then
                warn(("‚ùå L·ªói khi g·ª≠i '%s': %s"):format(item.Name, tostring(err)))
            end

            -- üîÑ ƒê∆∞a tool v·ªÅ Backpack sau khi g·ª≠i
            task.wait(0.2)
            for _, tool in ipairs(character:GetChildren()) do
                if tool:IsA("Tool") then
                    tool.Parent = Backpack
                end
            end

            -- ‚è≥ Ch·ªù tool th√°o ra ho√†n to√†n
            local timeout = 0
            repeat
                task.wait(0.1)
                timeout += 0.1
            until not character:FindFirstChildOfClass("Tool") or timeout > 3

            -- ‚åõ Ch·ªù cooldown gi·ªØa c√°c l∆∞·ª£t gift
            task.wait(giftCooldown)
        end

        print(("üéØ ƒê√£ g·ª≠i %d pets cho %s"):format(sentCount, receiverName))
    end

    print(("\n‚ú® T·ªïng c·ªông ƒë√£ g·ª≠i: %d pets.\n"):format(totalSent))
end


local function getUUID(obj)
    local uuid = obj:GetAttribute("UUID")
    if uuid then return uuid end
    
    for _, v in pairs(obj:GetAttributes()) do
        if type(v) == "string" and v:match("%x%x%x%x%x%x%x%x%-%x%x%x%x%-%x%x%x%x%-%x%x%x%x%-%x%x%x%x%x%x%x%x%x%x%x%x") then
            return v
        end
    end
end

local function isInList(name, list)
    for _, item in pairs(list) do
        if name:lower():find(item:lower()) then
            return true
        end
    end
    return false
end

local function removeAllPetsFromPlots()
    local workspace = game:GetService("Workspace")
    local plots = workspace:FindFirstChild("Plots")
    
    if not plots then
        warn("Not Found Plots")
        return
    end
    
    local count = 0
    
    for _, plot in pairs(plots:GetChildren()) do
        local plants = plot:FindFirstChild("Plants")
        if plants then
            for _, plant in pairs(plants:GetChildren()) do
                if isInList(plant.Name, _G.CF.ListPetGift) then
                    local uuid = getUUID(plant)
                    
                    if uuid then
                        local success = pcall(function()
                            removeRemote:FireServer(uuid)
                        end)
                        
                        if success then
                            count = count + 1
                            print("delete ", plant.Name)
                            task.wait(0.3)
                        else
                            warn("erro delete ", plant.Name)
                        end
                    end
                end
            end
        end
    end
    
    print(("Delete %d pets From plots"):format(count))
end


local function SellMaxInventory()
    local playerGui = LocalPlayer:FindFirstChild("PlayerGui")
    if not playerGui then return false end
    
    local hud = playerGui:FindFirstChild("HUD")
    if not hud then return false end
    
    local maxInvObj = hud:FindFirstChild("MaxInv")
    if not maxInvObj then return false end
    
    local maxInventory = 250
    if maxInvObj:IsA("IntValue") or maxInvObj:IsA("NumberValue") then
        maxInventory = maxInvObj.Value
    elseif maxInvObj:IsA("TextLabel") or maxInvObj:IsA("TextBox") then
        maxInventory = tonumber(maxInvObj.Text) or 250
    end
    
    local itemCount = #Backpack:GetChildren()
    
    if itemCount < maxInventory then
        print(("Inventory %d/%d - Not Full"):format(itemCount, maxInventory))
        return false
    end
    
    print(("Full %d/%d - Start Sell!"):format(itemCount, maxInventory))
    
    local success = pcall(function()
        ItemSell:FireServer()
    end)
    
    if not success then
        warn("erro request selling")
        return false
    end
    
    task.wait(0.5)
    
    local popupGui = hud:FindFirstChild("PopUp")
    if not popupGui then return false end
    
    local content = popupGui:FindFirstChild("Content")
    if not content then return false end
    
    local buttons = content:FindFirstChild("Buttons")
    if not buttons then return false end
    
    local yes = buttons:FindFirstChild("Yes")
    if not yes then return false end
    
    local yesBtn = yes:FindFirstChild("TextButton")
    if not yesBtn then return false end
    
    local timeout = 0
    while not popupGui.Visible and timeout < 10 do
        task.wait(0.1)
        timeout = timeout + 0.1
    end
    
    if not popupGui.Visible then
        warn("Popup not show")
        return false
    end
    
    task.wait(0.2)
    print("YES...")

    pcall(function()
        for _, conn in pairs(getconnections(yesBtn.Activated)) do
            conn:Fire()
        end
    end)
    
    pcall(function()
        for _, conn in pairs(getconnections(yesBtn.MouseButton1Click)) do
            conn:Fire()
        end
    end)
    
    task.wait(0.5)
    return true
end

-- üß† Ki·ªÉm tra inventory
local function CheckAndManageInventory()
    if not Backpack then
        warn("Backpack does not exist")
        return
    end
    
    local playerGui = LocalPlayer:FindFirstChild("PlayerGui")
    if not playerGui then return end
    
    local hud = playerGui:FindFirstChild("HUD")
    if not hud then return end
    
    local maxInvObj = hud:FindFirstChild("MaxInv")
    if not maxInvObj then return end
    
    local maxInventory = 250
    if maxInvObj:IsA("IntValue") or maxInvObj:IsA("NumberValue") then
        maxInventory = maxInvObj.Value
    elseif maxInvObj:IsA("TextLabel") or maxInvObj:IsA("TextBox") then
        maxInventory = tonumber(maxInvObj.Text) or 250
    end
    
    local itemCount = #Backpack:GetChildren()
    
    if itemCount >= maxInventory then
        print("  ‚Üí quest 1: Ban items...")
        pcall(SellMaxInventory)
        task.wait(3)
        print("  ‚Üí quest 2: Xoa pets khoi plots...")
        pcall(removeAllPetsFromPlots)
    else
        print("Inventory OK, xoa pets khoi plots...")
        pcall(removeAllPetsFromPlots)
    end
end

-- üîÅ V√≤ng l·∫∑p ch√≠nh
task.spawn(function()
    task.wait(2)
    while true do
        pcall(CheckAndManageInventory)
        task.wait(1)

        if _G.CF.autoFavorite then
            print("\n‚≠ê Qu√©t v√† favorite pets...")
            pcall(scanAndFavoritePets)
            task.wait(2)
        end

        if _G.CF.autoSendGift then
            print("\nüì¶ G·ª≠i gifts...")
            pcall(ToGift)
            task.wait(3)
        end
    end
end)

print("‚úÖ Script loaded! Auto loops started.")

